/**
 * @file functionHooking.cpp
 * @brief Function hooking implementation for PoCEC.exe screenshot functionality
 * 
 * This file implements a DLL that hooks into PoCEC.exe's screenshot functionality
 * to modify its behavior. It provides functions to:
 * - Hook the original TakeScreenshot function
 * - Set custom screenshot frequency
 * - Implement a modified screenshot behavior
 * 
 * The DLL automatically hooks the function when loaded into the target process.
 * 
 * @note This is an example implementation using hardcoded memory addresses
 * @warning This code is for educational purposes only and should not be used maliciously
 * 
 * Global variables:
 * @var originalTakeScreenshot Pointer to the original TakeScreenshot function
 * @var pFrequency Pointer to the frequency value in memory
 * 
 * Exported functions:
 * @fn void SetScreenshotFrequency(UINT8 newFrequency)
 * @fn void HookedTakeScreenshot(UINT16& sCounter)
 * @fn void HookTakeScreenshot()
 */

#include <windows.h>
#include <iostream>
#include <fstream>
#include <string>



typedef void (*TakeScreenshot_t)(UINT16&);

TakeScreenshot_t originalTakeScreenshot = nullptr;
UINT8* pFrequency = nullptr;

extern "C" __declspec(dllexport) void SetScreenshotFrequency(UINT8 newFrequency)
{
    if (pFrequency) {
        *pFrequency = newFrequency;
    }
}

extern "C" __declspec(dllexport) void HookedTakeScreenshot(UINT16& sCounter)
{
    const UINT8 newFrequency = 10;
    SetScreenshotFrequency(newFrequency);
    Sleep(newFrequency * 1000);
    originalTakeScreenshot(sCounter);
}

/**
 * @brief Hooks the TakeScreenshot function in PoCEC.exe with a custom implementation
 * 
 * This function performs function hooking by:
 * 1. Getting a handle to PoCEC.exe module
 * 2. Setting up frequency pointer to a hardcoded address
 * 3. Getting the original TakeScreenshot function address
 * 4. Replacing it with the hooked implementation (HookedTakeScreenshot)
 * 
 * @note Exported as a DLL function
 * @warning Uses hardcoded memory address (just an example) (0x12345678) for frequency pointer
 */
extern "C" __declspec(dllexport) void HookTakeScreenshot()
{
    HMODULE hModule = GetModuleHandleA("PoCEC.exe");

    if (hModule) {
        pFrequency = reinterpret_cast<UINT8*>(0x12345678);

        originalTakeScreenshot = reinterpret_cast<TakeScreenshot_t>(GetProcAddress(hModule, "TakeScreenshot"));

        if (originalTakeScreenshot) {
            *reinterpret_cast<TakeScreenshot_t*>(&originalTakeScreenshot) = HookedTakeScreenshot;
        }
    }
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
{
    if (ul_reason_for_call == DLL_PROCESS_ATTACH) {
        HookTakeScreenshot();
    }
    return TRUE;
}
